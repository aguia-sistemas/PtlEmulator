@model Dictionary<int, Dictionary<int, ProtocolEmulate.Models.DisplayWidget>>

<h1 class="text-center my-4">PTL Emulator</h1>


<div id="scanner-container" class="container mb-4">
    <div class="row align-items-center">
        <div class="col-auto">
            <img src="~/Icons/barcode-read.gif" alt="Barcode Scanner" class="img-fluid" />
        </div>
        <div class="col-auto">
            <input type="text" id="scanner-input" name="scanner-input" class="form-control" />
        </div>
        <div class="col-auto">
            <button id="scanner-button" class="btn btn-primary">
                Leitura P01
            </button>
        </div>
    </div>
</div>

<div id="clients-container" class="container">
    @foreach (var client in Model)
    {
        <div class="mb-4">
            <h2>Controlador @client.Key</h2>
            <div class="row">
                @foreach (var display in client.Value)
                {
                    <div class="col-3 col-md-2 col-lg-1 mb-3">
                        <div class="display-widget p-3 border rounded bg-light">
                            <button class="confirm btn btn-secondary w-100 mb-2" style="background-color: @display.Value.ButtonConfirm.Color">
                                @display.Value.ButtonConfirm.Label
                            </button>
                            <div class="button-container d-flex justify-content-between">
                                <button class="plus btn btn-primary">+</button>
                                <button class="minus btn btn-primary">-</button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        function updateDisplayData() {
            fetch('/Home/GetDisplayData')
                .then(response => response.json())
                .then(data => {
                    const container = document.getElementById('clients-container');
                    container.innerHTML = '';
                    for (const clientId in data) {
                        const clientDiv = document.createElement('div');
                        const clientHeader = document.createElement('h2');
                        clientHeader.textContent = `Client ${clientId}`;
                        clientDiv.appendChild(clientHeader);

                        const displayContainer = document.createElement('div');
                        displayContainer.className = 'row';

                        for (const displayId in data[clientId]) {
                            const displayWidget = data[clientId][displayId];
                            const displayDiv = document.createElement('div');
                            displayDiv.className = 'col-3 col-md-2 col-lg-1 mb-3';

                            const widgetDiv = document.createElement('div');
                            widgetDiv.className = 'display-widget p-3 border rounded bg-light';

                            const confirmButton = document.createElement('button');
                            confirmButton.className = 'confirm btn btn-secondary w-100 mb-2';
                            confirmButton.style.backgroundColor = displayWidget.buttonConfirm.color;
                            confirmButton.textContent = displayWidget.buttonConfirm.label;
                            confirmButton.value = displayWidget.buttonConfirm.label;
                            confirmButton.setAttribute('data-client-id', clientId);
                            confirmButton.setAttribute('data-display-id', displayId);
                            confirmButton.onclick = () => sendConfirm(clientId, displayId, confirmButton.value);

                            const buttonContainer = document.createElement('div');
                            buttonContainer.className = 'button-container d-flex justify-content-between';

                            const plusButton = document.createElement('button');
                            plusButton.className = 'plus btn btn-primary btn-sm';
                            plusButton.textContent = '+';
                            plusButton.onclick = () => increaseValue(clientId, displayId);

                            const minusButton = document.createElement('button');
                            minusButton.className = 'minus btn btn-primary btn-sm';
                            minusButton.textContent = '-';
                            minusButton.onclick = () => decreaseValue(clientId, displayId);

                            buttonContainer.appendChild(plusButton);
                            buttonContainer.appendChild(minusButton);

                            widgetDiv.appendChild(confirmButton);
                            widgetDiv.appendChild(buttonContainer);
                            displayDiv.appendChild(widgetDiv);
                            displayContainer.appendChild(displayDiv);
                        }

                        clientDiv.appendChild(displayContainer);
                        container.appendChild(clientDiv);
                    }
                })
                .catch(error => console.error('Error fetching display data:', error));
        }

        function sendConfirm(clientId, displayId, value) {
            value = value.trim(); // Remove espaços em branco
            console.log('Sending confirm:', clientId, displayId, value);
            fetch('/Home/SendConfirm', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ clientId, displayId, value })
            })
                .then(response => response.json())
                .then(data => {
                    console.log('Confirm sent:', data);
                })
                .catch(error => console.error('Error sending confirm:', error));
        }

        function increaseValue(clientId, displayId) {
            const confirmButton = document.querySelector(`button.confirm[data-client-id="${clientId}"][data-display-id="${displayId}"]`);
            let value = parseInt(confirmButton.value, 10);
            if (!isNaN(value)) {
                value++;
                confirmButton.value = value;
                confirmButton.textContent = value;
            }
        }

        function decreaseValue(clientId, displayId) {
            const confirmButton = document.querySelector(`button.confirm[data-client-id="${clientId}"][data-display-id="${displayId}"]`);
            let value = parseInt(confirmButton.value, 10);
            if (!isNaN(value)) {
                value--;
                confirmButton.value = value;
                confirmButton.textContent = value;
            }
        }

        document.getElementById('scanner-button').addEventListener('click', function() {
            const scannerInput = document.getElementById('scanner-input').value;

            fetch('/Home/ProcessScanner', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ scannerValue: scannerInput })
            })
                .then(response => response.json())
                .then(data => {
                    console.log('Scanner data sent:', data);
                })
                .catch(error => console.error('Error sending scanner data:', error));
        });

        setInterval(updateDisplayData, 2000);
    </script>
}

<style>
    #scanner-container img {
        width: 40px;
        height: auto;
    }

    .display-widget {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .display-widget button {
        width: 100%;
    }

    .button-container button {
        width: 40px;
        height: 40px;
    }

    .button-container button {
        width: 30px;
        height: 30px;
        border-radius: 50%;
        padding: 0;
        display: flex;
        align-items: center;
        justify-content: center;
    }
</style>