@model Dictionary<int, Dictionary<int, ProtocolEmulate.Models.DisplayWidget>>

<h1>PTL Emulator</h1>

<div id="clients-container">
    @foreach (var client in Model)
    {
        <div>
            <h2>Client @client.Key</h2>
            <div style="display: flex; flex-wrap: wrap; width: 100%;">
                @foreach (var display in client.Value)
                {
                    <div class="display-widget">
                        <button class="confirm" style="background-color: @display.Value.ButtonConfirm.Color">@display.Value.ButtonConfirm.Label</button>
                        <div class="button-container">
                            <button class="plus">+</button>
                            <button class="minus">-</button>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        function updateDisplayData() {
            fetch('/Home/GetDisplayData')
                .then(response => response.json())
                .then(data => {
                    const container = document.getElementById('clients-container');
                    container.innerHTML = '';
                    for (const clientId in data) {
                        const clientDiv = document.createElement('div');
                        const clientHeader = document.createElement('h2');
                        clientHeader.textContent = `Client ${clientId}`;
                        clientDiv.appendChild(clientHeader);

                        const displayContainer = document.createElement('div');
                        displayContainer.style.display = 'flex';
                        displayContainer.style.flexWrap = 'wrap';
                        displayContainer.style.width = '100%';

                        for (const displayId in data[clientId]) {
                            const displayWidget = data[clientId][displayId];
                            const displayDiv = document.createElement('div');
                            displayDiv.className = 'display-widget';

                            const confirmButton = document.createElement('button');
                            confirmButton.className = 'confirm';
                            confirmButton.style.backgroundColor = displayWidget.buttonConfirm.color;
                            confirmButton.textContent = displayWidget.buttonConfirm.label;
                            confirmButton.value = displayWidget.buttonConfirm.label;
                            confirmButton.setAttribute('data-client-id', clientId);
                            confirmButton.setAttribute('data-display-id', displayId);
                            confirmButton.onclick = () => sendConfirm(clientId, displayId, confirmButton.value);

                            const buttonContainer = document.createElement('div');
                            buttonContainer.className = 'button-container';

                            const plusButton = document.createElement('button');
                            plusButton.className = 'plus';
                            plusButton.textContent = '+';
                            plusButton.onclick = () => increaseValue(clientId, displayId);

                            const minusButton = document.createElement('button');
                            minusButton.className = 'minus';
                            minusButton.textContent = '-';
                            minusButton.onclick = () => decreaseValue(clientId, displayId);

                            buttonContainer.appendChild(plusButton);
                            buttonContainer.appendChild(minusButton);

                            displayDiv.appendChild(confirmButton);
                            displayDiv.appendChild(buttonContainer);
                            displayContainer.appendChild(displayDiv);
                        }

                        clientDiv.appendChild(displayContainer);
                        container.appendChild(clientDiv);
                    }
                })
                .catch(error => console.error('Error fetching display data:', error));
        }

        function sendConfirm(clientId, displayId, value) {
            value = value.trim(); // Remove espaços em branco
            console.log('Sending confirm:', clientId, displayId, value);
            fetch('/Home/SendConfirm', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ clientId, displayId, value })
            })
                .then(response => response.json())
                .then(data => {
                    console.log('Confirm sent:', data);
                })
                .catch(error => console.error('Error sending confirm:', error));
        }

        function increaseValue(clientId, displayId) {
            const confirmButton = document.querySelector(`button.confirm[data-client-id="${clientId}"][data-display-id="${displayId}"]`);
            let value = parseInt(confirmButton.value, 10);
            if (!isNaN(value)) {
                value++;
                confirmButton.value = value;
                confirmButton.textContent = value;
            }
        }

        function decreaseValue(clientId, displayId) {
            const confirmButton = document.querySelector(`button.confirm[data-client-id="${clientId}"][data-display-id="${displayId}"]`);
            let value = parseInt(confirmButton.value, 10);
            if (!isNaN(value)) {
                value--;
                confirmButton.value = value;
                confirmButton.textContent = value;
            }
        }

        setInterval(updateDisplayData, 2000);
    </script>
}

<style>
    #clients-container {
        display: flex;
        flex-wrap: wrap;
        width: 100%;
    }

    .display-widget {
        display: flex;
        flex-direction: row;
        align-items: center;
        border: 1px solid #ccc;
        padding: 5px; /* Reduzido de 10px para 5px */
        border-radius: 5px;
        background-color: #f9f9f9;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        margin: 5px;
        flex: 1 0 8%; /* Ajuste a largura para 12 displays por linha */
        box-sizing: border-box;
    }

    .display-widget button {
        width: 40px; /* Reduzido de 60px para 40px */
        height: 40px; /* Reduzido de 60px para 40px */
        margin: 5px;
        font-size: 1em; /* Reduzido de 1.2em para 1em */
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .display-widget button.confirm {
        background-color: #ddd;
        color: #000;
    }

    .display-widget .button-container {
        display: flex;
        flex-direction: column;
        margin-left: 10px;
    }

    .display-widget button.plus,
    .display-widget button.minus {
        width: 20px; /* Reduzido de 30px para 20px */
        height: 20px; /* Reduzido de 30px para 20px */
        background-color: #007bff;
        color: #fff;
        font-size: 0.8em; /* Reduzido de 1em para 0.8em */
        border-radius: 50%;
        margin: 2px 0;
    }

    .display-widget button.plus:hover,
    .display-widget button.minus:hover {
        background-color: #0056b3;
    }
</style>